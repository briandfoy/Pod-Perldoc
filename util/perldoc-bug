#!/usr/bin/env perl
use v5.10;

use Config qw(%Config);
use Cwd qw(getcwd);
use File::Spec::Functions qw(catfile);
use JSON::PP;
use Pod::Perldoc;

=encoding utf8

=head1 NAME

perldoc-bug - a program to collect info for bug reports

=head1 SYNOPSIS

Collect basic information. The output is always JSON:

	$ perldoc-bug | jq -r .

Also run perldoc and collect output and debugging info:

	$ perldoc-bug [MODULE|FILE|URL]

Choose a particular perldoc:

	$ env PERLDOC_PATH=/path/to/perldoc perldoc-bug [MODULE|FILE|URL]

Run with a particular perl and library path

	$ perl -Ilib perldoc-bug [MODULE|FILE|URL]

=head1 DESCRIPTION

This collects most of the information we need to investigate problems
with C<perldoc> and output it as JSON. You have to save this yourself
to use to report a problem; nothing is sent anywhere automatically,
If you don't like something in the JSON (it's sensitive info, whatever),
just edit it out.

Run the program without arguments and it collects some
basic info about your system. Run it with the same arguments that you'd
give to the real C<perldoc> and it runs C<perldoc> and collects the
input and output.

You can change the C<perldoc> to use by setting C<PERLDOC_PATH>.

You can change the C<perl> to use by running this with the C<perl>
you want to test. Use the basic C<perl> settings to set library paths
and so on.

You can attach this output to an issue that you report at
L<https://github.com/briandfoy/pod-perldoc/issues>.

=head1 SOURCE AVAILABILITY

This module is on Github:

	https://github.com/briandfoy/pod-perldoc

=head1 AUTHOR

brian d foy, C<< <briandfoy@pobox.org> >>

=head1 COPYRIGHT AND LICENSE

Copyright Â© 2023, brian d foy C<< <bdfoy@cpan.org> >>. All rights reserved.
This software is available under the Artistic License 2.0.

=cut

my %hash;

$hash{os}{type} = $^O;
if( $osname eq 'MSWin32' and eval { require Win32; } ) {
	$hash{os}{name} = Win32::GetOSName();
	}
else {
	$hash{os}{uname} = `uname -a`;
	}


$hash{pod_perldoc}{cwd} = getcwd();
$hash{pod_perldoc}{version} = Pod::Perldoc->VERSION;
$hash{pod_perldoc}{path} = $INC{'Pod/Perldoc.pm'};
if( $hash{pod_perldoc}{cwd} =~ /\bpod-perldoc\z/i and -e '.git' ) {
	$hash{pod_perldoc}{commit} = `git log --format="%H" -n 1`;
	chomp $hash{pod_perldoc}{commit};
	}

say STDERR "Found Pod::Perldoc <$hash{pod_perldoc}{version}> from <$INC{'Pod/Perldoc.pm'}>. Set PERL5LIB is you want to use a different module location.";
$hash{perl}{version} = "$^V";
$hash{perl}{config} = \%Config;

my @env_keys = qw(
	LANG LC_ALL LC_LANG LESS MANPAGER MANWIDTH MORE PAGER PERLDOC PERLDOC_PAGER
	PERLDOCDEBUG RTFREADER TERM
	LESSCHARSET TERM_PROGRAM TERM_PROGRAM_VERSION
	LC_TERMINAL LC_TERMINAL_VERSION
	);

foreach my $key ( @env_keys ) {
	$hash{env}{$key} = $ENV{$key};
	}

my $perldoc_path = find_perldoc();
if( length $perldoc_path ) {
	say STDERR "Found <$perldoc_path>. Set PERLDOC_PATH is you want to use a different perldoc.";
	$hash{perldoc_path} = $perldoc_path;

	my $loaded = eval { require Capture::Tiny; Capture::Tiny->import('capture'); 1};
	if( $loaded ) {
		local $ENV{PERLDOCDEBUG} = 0;
		$hash{perldoc}{'-h'} = ( capture( sub {
		  system $^X, $perldoc_path, '-h';
		  }) )[1];  # -h output is on stderr

		if( @ARGV ) {
			local $ENV{PERLDOCDEBUG} = 5;
			say STDERR "Running <$^X $perldoc_path -D @ARGV> to collect a sample run.";
			@{ $hash{perldoc} }{ qw(stdout stderr exit) } = capture( sub {
			  system $^X, $perldoc_path, '-D', @ARGV;
			  });

			$hash{perldoc}{input}{arg} = $ARGV[-1];
			if( open my $fh, '<:raw', $ARGV[-1] ) {
				$hash{perldoc}{input}{contents} = do { local $/; <$fh> };
				}
			else {
				$hash{perldoc}{input}{error} = "$!";
				}
			}
		else {
			say STDERR "There were no arguments, so not running perldoc to collect a sample run.";
			}
		}
	else {
		say STDERR "Install Capture::Tiny to collect sample runs.";
		}
	}
else {
	say STDERR "Could not find perldoc. Set PERLDOC_PATH to get the one you want.";
	}

say JSON::PP::encode_json( \%hash );

sub find_perldoc {
	return $ENV{PERLDOC_PATH} if -e $ENV{PERLDOC_PATH};

	foreach my $dir ( split /$Config{path_sep}/, $ENV{PATH} ) {
		my @found =
			grep { -e }
			map { catfile( $dir, $_ ) }
			map { ( $_, "$_.exe" ) }
			qw(perldoc);
		return $found[0] if @found;
		}

	return '';
	}
